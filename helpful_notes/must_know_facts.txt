1. Python is a very object-oriented language.
    In fact, pretty much everything in Python is an object that’s been instantiated (created) by a particular class.

    Checking the Data Type (class) of an Object
    We use the type() function to obtain the class used to instantiate the data:

    >>> type(42)
    <class 'int'>
    >>> type('hello')
    <class 'str'>
    >>> type(True)
    <class 'bool'>

2. Declaring - there is no undefined in Python
    Here is how we declare a variable in Python:

    my_number = 15
    Notice that there is no var, let, or const keyword in Python. We only need the name of the variable and then we can assign to it.

    However, you cannot just declare a variable without assigning to it - there is no undefined in Python:

    # illegal syntax...
    my_variable
    NameError: name 'my_variable' is not defined

3. Integer Division
    You can force the result to be an integer when dividing two integers using // instead of /:

    >>> quotient = 5 // 2
    >>> quotient
    2
    # 2 is printed, because the decimal ".5" is truncated

4. in Python, a string is a sequence of characters. Therefore, len() works on strings

5. What is Falsy in python?
    False
    None
    Zero in any numeric type: 0, 0.0 and 0j
    Empty sequences or collections:
    '' (empty string)
    [] (empty list)
    () (empty tuple)
    {} (empty dictionary)
    range(0) (empty range)

6. and (and) or. What gets returned first in regards to truthy/falsy
        or
        If the first operand is truthy, return it, otherwise return the second operand.
        and
        If the first operand is falsy, return it, otherwise return the second operand. 

7. not
        “Flips” the truthiness/falsyness of its operand, and returns True or False

8. The break and continue Statements

        The break statement: 
            used to immediately exit for and while loops 
            and continue executing any statements that may follow them.
        The continue statement: 
            used to immediately return to the top of 
            the for or while loop. In the case of a while loop, its conditional expression is once 
            again evaluated to determine if the loop should continue.

9. Range in regards to looping:
        Ranges have a class (type) of range.


10. Two types of control flow in python:
        Branching and Looping  

11. How to get TERMINAL INPUTS:
        example:
            var = input("Please enter something: ")
            print("You entered: " + var)

12. Python has a for in and an if in

13. General Purpose Containers
        As you’ve learned, applications frequently need to maintain collections of data.
        We use a container data structures to hold these collections of data…

14. Dictionaries:
        - In Python, we commonly refer to key: value pairs as items vs. properties as in JS.
        - Dictionaries have a class (type) of dict.
        - Unlike in JS, when strings are used as keys, they must be quoted.
        - # * Any immutable type can be used as a key, including numbers and tuples 

15. Lists:
        - class type list
        - in the list are items - in javascript theyre referred to as elements
        - Lists are considered to be a sequence type in Python. 
        - A sequence is a generic term used for an ordered collection. 
        - Other sequence types in Python include strings and tuples.
        - we can use negative integers to index from the end of a list:
            colors[-1]
        - Unlike with JS arrays, assigning to a non-existing index results in an error:
        - enumerate is used to access index:
            for idx, color in enumerate(colors):
                print(idx, color)

16. Tuples:
        - paranthesis are optional but are the convention
        - ALL TUPLES REQUIRE COMMAS, EVEN SINGLES
                ex:
                - Will not create a tuple
                    hello_tuple = ('Hello')
                    print( type(hello_tuple) )
                    # >  <class 'str'>

                    hello_tuple = ('Hello',)
                    # or just the following (no parens required)
                    hello_tuple = 'Hello',
                    print( type(hello_tuple) )
                    # > <class 'tuple'>
        - Since tuples can’t be changed after they are created, 
        they are great for protecting data that you don’t want to be changed.
        - Tuples internally are “lighter weight” than lists and Python iterates 
        over tuples faster than lists.
        - Generally, you’ll find that tuples are used to contain heterogeneous (different) 
        data types and lists for homogeneous (similar) data types.

17. Functions
        - assigning a function to a variable upon creation of that function will not work.
        only after the function has been declared can it then be assigned to a variable.
        - python does not hoist functions. functions must first be delcared before ever called.

18. Lambda's must be all on one line.

19. Python’s * Parameter Specifier (*args)
        - The identifier used with *, i.e., args, can be anything, however by convention, use args.
            
            - Always use the *args parameter after any required positional parameters. For example:

            def dev_skills(dev_name, *args):
            dev = {'name': dev_name, 'skills': []}
            # args will be a tuple
            for skill in args:
                dev['skills'].append(skill)
            return dev

            print(dev_skills('Alex', 'HTML', 'CSS', 'JavaScript', 'Python'))
            # -> {'name': 'Alex', 'skills': ['HTML', 'CSS', 'JavaScript', 'Python']}

20. ******* Using dir() on an existing string, dictionary, list, etc.. will tell you all its attributes and methods

21. For an in depth description of all attributes and methods.. you can use the help() function

22. Python is an object-oriented programming (OOP) language.
        - What are classes used for in OOP?
                Classes are like "blueprints" and are used to create objects.
        A key principle of OOP we discussed during the JS Classes lesson is encapsulation…
        - What's encapsulation?
                The bundling of related properties (attributes) and methods (behavior) together in an object.
        - What's an instance method?
                A method that is callable on an instance of a class, i.e., object

23. self parameter in class init method is only that; a parameter.
        - this is because, for exmaple, cazador.bark(),,, after creating
        an object of that class and labing it cazador.. it becomes the first thing
        passed in which is why/how it simply takes in the space of self. 

24. Overriding methods is a thing for class. 
        - say for example you want a different output on a method that has a default result;
        you can override it

CLASS METHODS

25. The @classmethod decorator
        - The naming convention of the first parameter is to use cls instead of self

26. class methods are called on the class, not an instance
        - although class methods can technically be called by instances, it is not considered good practice.
        Class methods should be called by the class only as good practice and for neatness.

27. Inheritance
        - Using inheritance, a subclass automatically inherits all of the attributes and methods of its superclass.
        - The subclass can then define additional attributes and/or methods to make a more specialized class than the superclass.

28. Databases 
        Different Types of Databases
        - Most database technologies can be broken down into two main categories:
                - Relational databases
                - NoSQL databases

29. Schema
        The structure of a particular database is defined by its schema.
        Schemas define the database’s:
                Tables, including the number and data type of each column
                Indexes for efficient access of data
                Constraints (rules, such as whether a field can be null or not)

30. Tables
        The primary container for data in a relational database is a table
                col   col      col       col      col
        row        id | color | texture | size | customer_id
                -----------------------------------------
        row        1  | blue  | solid   | large| 4
                -----------------------------------------
        row        2  | red   | solid   | small| 2

        A single table in a relational database holds data for a particular data resource, 
        for example, customers, orders, reviews, etc.

31. Rows (Records)
        A row in a table represents a single instance of the data entity.
        For example a particular artist in the artists table.

32. Columns (Fields)
        The columns of a table have a:
                Name
                Data type (all data in a column must be of the same type)
                Optional constraints
        
        Common constraints for a column include:
        PRIMARY KEY: column, or group of columns, uniquely identify a row
        REFERENCES (Foreign Key): value in column must match the primary key in another table
        NOT NULL: column must have a value, it cannot be empty (null)
        UNIQUE: data in this column must be unique among all rows in the table

33. A primary key uniquely identifies a row within a table

34. A foreign key references the primary key of a related table.

35. Structured Query Language (SQL)
        a programming language used to CRUD data stored in a relational database.

36. psql
        a tool that runs in terminal and allows us to work with PostgreSQL
        databases by typing in commands.
                - to open in terminal, type in: psql
        some useful commands (note the use of a backslash):
                help -- general help
                \?   -- help with psql commands
                \h   -- help with SQL commands
                \l   -- Lists all databases
                \c   -- Connect to a database
                \d   -- List tables in database
                \q   -- exits psql
                q    -- exits a psql list or dialogue