Components of a Django Project
---------------------------------Python-------------------------------------------|
       |-------------------Django Framework---------------------------------------|
       |                        -----Django Project ---------------------------|  |
       |                        |             |----------Django App-------|    |  |
BROWSER|----Get Page Reqhest----> urls.py ----|-> urls.py --> VIEW Layer  |    |  |
     \ |                        |             |               (views.py)  |    |  |
       \                        |             |           /        |      |    |  |
       |HTML                    |             |         /          |      |    |  |
       |  \                     |             |       /            |      |    |  |
       |   \                    |             |     /              |      |    |  |
       |      Template    <-----------------------/                |      |    |  |
       |       Layer            |             |                           |    |  |
                                |             |             Model Layer   |    |  |
                                |             |                        <--|----|--|-> Database
                                |             |             (models.py)   |    |  |
                                |             |                           |    |  |
                                |             |----------------------------    |  |



1. create your .gitignore file.

2. create your virtual enviroment within your project folder 
per the recommaneded good practice:
python3 -m venv env 

3. Active the virtual enviroment:
source env/bin/activate

step 4. install django:
pip install Django

step 5. upgrade pip in terminal as needed:
python3 -m pip install -–upgrade pip 
OR MAYBE DONT. may cause an issue  and not find DJANGO if that becomes the case:
python3 -m pip install Django

step 6. using postgres SQL, create the database:
    1. psql postgres
    2. CREATE DATABASE database_name_here;

step 7. create the django project:
django-admin startproject project_name_here(usually the same name as database)

step 8. cd into django project

step 9. within your django project, create your main app:
python3 manage.py startapp main_app

step 10. include migrations from the main app into the git ignore folder

step 10. include the main app you created into the INSTALLED APPS like so:
INSTALLED_APPS = [
	'main_app',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

step 11. after a succesful inclusion, you can test to see if the project starts up:
python3 manage.py runserver

step 12. Connecting to the Database
Earlier we created a dedicated catcollector PostgreSQL database.
A Django project’s configuration lives in settings.py. 
Let’s update it to use our catcollector database like in the below:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'created_database_name_here',
        # 'HOST': 'localhost',  <-- some computers might need this line
    }
}

** if at this point you get an error: ModuleNotFoundError: No module named 'psycopg2'
Install psycopg2: pip3 install psycopg2
refer to psycopg2.txt file for more information

step 13. Migrate the Pending Migrations:
python3 manage.py migrate

We use migrations to update the database’s schema 
over time to meet the project’s needs.

step 14. In the main_app, create the urls.py module:
touch main_app/urls.py

step 15. Include it in the project, project_name/urls.py
like in the below:

from django.contrib import admin

 from django.urls import path, include
	
 urlpatterns = [
     path('admin/', admin.site.urls),
     # '' represents the "starts with" path
     path('', include('main_app.urls')),
 ]
Be sure to import the include function near the top.

step 16. add the boiler plate needed in main_app/urls.py
from django.urls import path
 from . import views
	
 urlpatterns = [
	
 ]
 We’ve imported the path function that will be used to define each route.

 step 17. Define main_app’s Home Page URL like in the below:

 In main_app/urls.py:

urlpatterns = [
  path('', views.home, name='home'),
]

step 17. in main_app/views.py, define the home view function 
and render a non-existing template:

from django.shortcuts import render

# Define the home view
def home(request):
  # Include an .html file extension - unlike when rendering EJS templates
  return render(request, 'home.html')

As expected, refreshing localhost:8000 will cause an error 
complaining that the template does not exist

step 18. create the templates folder in the main app
and create an html file in this case home.html