Components of a Django Project
---------------------------------Python-------------------------------------------|
       |-------------------Django Framework---------------------------------------|
       |                        -----Django Project ---------------------------|  |
       |                        |             |----------Django App-------|    |  |
BROWSER|----Get Page Reqhest----> urls.py ----|-> urls.py --> VIEW Layer  |    |  |
     \ |                        |             |               (views.py)  |    |  |
       \                        |             |           /        |      |    |  |
       |HTML                    |             |         /          |      |    |  |
       |  \                     |             |       /            |      |    |  |
       |   \                    |             |     /              |      |    |  |
       |      Template    <-----------------------/                |      |    |  |
       |       Layer            |             |                           |    |  |
                                |             |             Model Layer   |    |  |
                                |             |                        <--|----|--|-> Database
                                |             |             (models.py)   |    |  |
                                |             |                           |    |  |
                                |             |----------------------------    |  |



1. create your .gitignore file.

2. create your virtual enviroment within your project folder 
per the recommaneded good practice:
python3 -m venv env 

3. Active the virtual enviroment:
source env/bin/activate

step 4. install django:
pip install Django

step 5. upgrade pip in terminal as needed:
python3 -m pip install -–upgrade pip 
OR MAYBE DONT. may cause an issue  and not find DJANGO if that becomes the case:
python3 -m pip install Django

step 6. using postgres SQL, create the database:
    1. psql postgres
    2. CREATE DATABASE database_name_here;

step 7. create the django project:
django-admin startproject project_name_here(usually the same name as database)

step 8. cd into django project

step 9. within your django project, create your main app:
python3 manage.py startapp main_app

step 10. include migrations from the main app into the git ignore folder

step 10. include the main app you created into the INSTALLED APPS like so:
INSTALLED_APPS = [
	'main_app',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

step 11. after a succesful inclusion, you can test to see if the project starts up:
python3 manage.py runserver

step 12. Connecting to the Database
Earlier we created a dedicated catcollector PostgreSQL database.
A Django project’s configuration lives in settings.py. 
Let’s update it to use our catcollector database like in the below:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'created_database_name_here',
        # 'HOST': 'localhost',  <-- some computers might need this line
    }
}

** if at this point you get an error: ModuleNotFoundError: No module named 'psycopg2'
Install psycopg2: pip3 install psycopg2
refer to psycopg2.txt file for more information

step 13. Migrate the Pending Migrations:
python3 manage.py migrate

We use migrations to update the database’s schema 
over time to meet the project’s needs.

step 14. In the main_app, create the urls.py module:
touch main_app/urls.py

step 15. Include it in the project, project_name/urls.py
like in the below:

from django.contrib import admin

 from django.urls import path, include
	
 urlpatterns = [
     path('admin/', admin.site.urls),
     # '' represents the "starts with" path
     path('', include('main_app.urls')),
 ]
Be sure to import the include function near the top.

step 16. add the boiler plate needed in main_app/urls.py
from django.urls import path
 from . import views
	
 urlpatterns = [
	
 ]
 We’ve imported the path function that will be used to define each route.

 step 17. Define main_app’s Home Page URL like in the below:

 In main_app/urls.py:

urlpatterns = [
  path('', views.home, name='home'),
]

step 17. in main_app/views.py, define the home view function 
and render a non-existing template:

from django.shortcuts import render

# Define the home view
def home(request):
  # Include an .html file extension - unlike when rendering EJS templates
  return render(request, 'home.html')

As expected, refreshing localhost:8000 will cause an error 
complaining that the template does not exist

step 18. create the templates folder in the main app
and create an html file in this case home.html and other files
as needed.

step 19. create the base template for template inheritance

step 20. create the static folder in main_app 

step 21. within the static folder create a css folder

step 22. within the css folder create the style.css 
here, you create your css code as normal

step 23. use the template tag load static in the base.html
to apply the styling to add that extends the base.

done so like in the below:
{% load static %}

<!DOCTYPE html>

step 24. add the css link in the base.html 
using the django template tag of static followed
by the location of the style.css 

done so like in the below: 
<link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">

step 25. Render Data on templates
  Step 1 - Identify the “Proper” Route
  '/route_name' ex: '/cats'

  Step 2 - Create the UI
  For the UI, it makes sense to add the View All My Cats link to the navigation bar in base.html
  ex: <li><a href="/route_name">route name etc</a></li>

  Step 3 - Define the Route
  Now let’s add the new route to main_app/urls.py:
  ex: 
      urlpatterns = [
      path('', views.home, name='home'),
      path('about/', views.about, name='about'),
      # route for route_name index
      path('route_name/', views.route_name_index, name='index'),
    ]
  
  Step 4 - Code the View
  # Add new view

  example: 

  def cats_index(request):
    # We pass data to a template very much like we did in Express!
    return render(request, 'route_name/index.html', {
      'name_of_data_being_passed': data_name
    })

  # views.py

    # Add this data list below the imports
    data_name = [
      {'name': 'Lolo', 'breed': 'tabby', 'description': 'furry little demon', 'age': 3},
      {'name': 'Sachi', 'breed': 'calico', 'description': 'gentle and loving', 'age': 2},
    ]

  Step 5 - Respond to the Client’s HTTP Request
  example: mkdir main_app/templates/data_name
  touch main_app/templates/data_name/index.html

  example: in template:
    {% extends 'base.html' %}
  {% block content %}

  <h1>Cat List</h1>

  {% for data in data_name %}
    <div class="card">
      <div class="card-content">
        <span class="card-title">{{ data.name }}</span>
        <p>Breed: {{ data.breed }}</p>
        <p>Description: {{ data.description }}</p>
        {% if data.age > 0 %}
          <p>Age: {{ data.age }}</p>
        {% else %}
          <p>Age: Kitten</p>
        {% endif %}
      </div>
    </div>
  {% endfor %}

  {% endblock %}